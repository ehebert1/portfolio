const data = {
    "en": {
        "about-me": "About me",
        "about-me-cegep": "CEGEP de l'Outaouais",
        "about-me-cegep-content": "I chose computer science at this CEGEP since I wanted to become a programmer and this program allowed me to learn programming while specializing myself towards website development, which I started learning during my high school studies. At this school, I managed to learn the basics of programming, like object oriented programming, web development with multiple frameworks (ASP.NET MVC, Laravel, etc.), mobile development as well as network programming.",
        "about-me-cegep-information": "College studies diploma in computer science, 2016-2020",
        "about-me-cf-title": "ColdFusion",
        "about-me-cf-content": "Adobe ColdFusion 2018 is a programming and a markup language that I have used during my time at the Government of Canada. This language facilitates the creation of website applications that use databases. This language is easy to learn and allows to create web applications very quickly.",
        "about-me-csharp-title": "C#",
        "about-me-csharp-content": "C# is the first programming language I have learned. Since its structure is simple, it is probably my favourite programming language to use. I have developped multipls console applications, form applications, backend server code for website applications as well as making video games using the Unity game engine.",
        "about-me-cpp-title": "C++",
        "about-me-cpp-content": "C++ is the latest programming language I have learned. I only starting learning it at the begging of my time at this university, but I have had plenty of opportunities to use it since we use Unreal Engine a lot and since the common courses in computer science asks us to use this programming language. I have succeeded in mastering object oriented programming and the use of pointers in this programming language.",
        "about-me-home-content": "Visit my About me page. In this page, you will be able to learn more about myself, my skill as well as my experience.",
        "about-me-introduction": "I am Éric Hébert and I am currently studying video game development at the University of Québec at Chicoutimi. Ever since I was young, I was interested by computers and video games. I remember as a child play on the Nintendo 64 with my brothers or even playing Runescape on our computers. This passion, growing since childhood, brought me to divert from website development and change my path towards video game development.",
        "about-me-java-title": "Java",
        "about-me-java-content": "Java is one of the programming languages I have not used much, but it is similar to C#. I have mostly used it for mobile applications development and for network programming.",
        "about-me-js-title": "JavaScript",
        "about-me-js-content": "JavaScript is a language you need to master in order to do modern website development. I have had the chance to use JavaScript in a variety of different ways and with a lot of different libraries. I have used jQuery, VueJS and I have used the PhaserJS game engine, which allows you to create 2D video games on a webpage. I have also used TypeScript, which is a JavaScript that forces you to use object typing.",
        "about-me-skills": "Skills",
        "about-me-skills-content": "",
        "about-me-sql-title": "SQL",
        "about-me-sql-content": "SQL is a language that is essential in order to manage large quantities of data. The two types of databases I have used are Microsoft SQL Server and MySQL. I have also used SQL with websites, mostly while using ASP.NET MVC with Entity Framework, Laravel with MySQL and Adobe ColdFusion with Microsoft SQL Server.",
        "about-me-studies": "Studies",
        "about-me-university": "Université du Québec à Chicoutimi",
        "about-me-university-content": "I chose video game development at this university since I had already heard about it during my time at CEGEP. Thanks to my studies at this university, I have learned C++, the entire process of video game development, such as conception, communicating with clients, collaborating with artists and making games using multiple game engines, notably Unreal Engine and Unity 3D.",
        "about-me-university-information": "Bachelor's in video game development, 2021-2024",
        "developer": "Éric Hébert",
        "developer-info": "Video Game Developer",
        "developer-info-content": "I am Éric Hébert, a student in video game development at Université du Québec à Chicoutimi. I am capable with multiple game engines, notably Unreal Engine, Unity 3D and PhaserJS. I invite you to browse my site.",
        "empty": "",
        "home": "Home",
        "lang": "FR",
        "projects": "Projects",
        //////////////////////////////////////////////////////////////////////
        "projects-bambooza-article": "<a href=\"https://ici.radio-canada.ca/nouvelle/2021611/deficit-attention-jeu-interactif\" target=\"_blank\" class=\"card-url\"><div><strong>CBC article of the launch of the <i>Bambooza</i> platform</strong></div></a>",
        "projects-bambooza-global-class": "Global and Versatile Class",
        "projects-bambooza-global-class-content": "For this project, we have decided to make a global class that wraps the Sprite class from Phaser. The reason we have decided to add a global class for this project is to simplify the initialisation of our GameObjects, since the creation of Phaser GameObjects can become quite heavy. This class allows easier creation of interactions of GameObjects, collisions between GameObjects, sprite creation/management, adding texts on images and a whole lot more.",
        "projects-bambooza-introduction": "<i>Bambooza</i> is an online video game platform made in collaboration with <a href=\"https://www.pandaslsj.org/\" target=\"_blank\">Panda Saguenay Lac Saint-Jean</a>, <a href=\"https://www.eckinox.ca/\" target=\"_blank\">Eckinox</a> and <a href=\"https://totemastudio.com/\" target=\"_blank\">Totema Studio</a>. This platform is made of seven different games with the goal of helping people affected by ADHD (Attention deficit hyperactivity disorder) in a professional environment.",
        "projects-bambooza-cauldron": "Cauldron",
        "projects-bambooza-cauldron-content": "The second game I have made for this platform is the cauldron. This game was a whole lot more difficult to make than the labyrinth. This game has for a goal to help improve the organisation of the player. This game has a lot of different components, notable the ingredients, the recipes and the bols. The most difficult part to make for this game was the bowls.",
        "projects-bambooza-cauldron-bowl": "Bowl",
        "projects-bambooza-cauldron-bowl-content": "The utilisation of the bowls is the most important for this game since it is the tool that is used to better understant the importance of organising yourself within the workspace. In this game, there are five different boles that allow the player to better organise the ingredients according to their own preferred way of organisation. The most difficult part to develop in this system was the reorganisation of the ingredients inside the bowl.",
        "projects-bambooza-cauldron-bowl-reorganisation": "Reorganisation of the ingredients",
        "projects-bambooza-cauldron-bowl-reorganisation-content": "We have three different ways to reorganise the ingredients, placing the ingredient at the end of the bowl, placing the ingredient in between two ingredients already in the list and exchanging positions of two ingredients. To place the ingredient at the end of the bowl, we just need to place the ingredient on the bowl when it is closed or putting the ingredient at the most bottom part of the bowl when it is opened. To place an ingredient between two ingredients, we need to put it in between two ingredients in the same row. To exchange the place between two ingredients, we need to place on ingredient on top of another one in the same bowl.",
        "projects-bambooza-cauldron-recipes": "Recipes and Ingredients",
        "projects-bambooza-cauldron-recipes-content": "The main goal of this game is to complete the recipes displayed above the cauldron using the ingredients provided on the right of the cauldron. However, there are a lot of ingredients available and they pile up one on top of the other and it becomes a gruesome task to accomplish. We have made it possible to reuse the ingredients since they appear in multiple recipes and this forces the player to properly organise themselves to be able to quickly locate the ignredients required for the recipe. For the ingredients and the recipes, I had to use the API provided by Eckinox to integrate them into the game. To complete the recipes, all you need to do is to drag the ingredients onto the cauldron and it will be added to the recipe. To make it easier for the player and to help them improve their organisation, we have created bowls to organise the ingredients.",
        "projects-bambooza-challenges": "Conception Challenges",
        "projects-bambooza-challenges-content": "The biggest conception challengs for this project was to collaborate with multiple teams on this project. We needed to collaborate with multiple different teams during the production for different aspects of the project, notably with Totema Studio for the development of the games for the platform and with Eckinox for all of the web technologies used for this project.",
        "projects-bambooza-labyrinth": "Labyrinth",
        "projects-bambooza-labyrinth-content": "The first game I made for the platform was the Labyrinth. The game in itself is pretty simple, it's a game where there is a question and two possible answers and when we answer correctly, we go forward in the labyrinth. There are two things that took longer to develop, the integration of the questions and displaying the progress inside the labyrinth.",
        "projects-bambooza-labyrinth-integration": "Integration of the Questions",
        "projects-bambooza-labyrinth-integration-content": "For the integration of the questions, we initially though of using a JSON file that would contain all of the questions and answers. The questions would be made of a couple of attributes, notably the text of the question, the color of the text, as well as the possible answers. The answers would also have a little bit of information, like the text as well as if it is the right answer. This system worked fine, but it does not allow to add questions and answers dynamically. Because of that, we have decided to change that system, while keeping the same attributes, but we would keep the questions and answers on a database the clients can access so they can add/delete/modify the questions by using a web interface. We then needed to implement the API made by Eckinox to retrieve the questions and answers.",
        "projects-bambooza-link": "<a href=\"https://jeux.bambooza.ca\" target=\"_blank\" class=\"card-url\"><div><strong>Link to the platform.</strong></div></a>",
        "projects-bambooza-labyrinth-progress": "Progress in the Labyrinth",
        "projects-bambooza-labyrinth-progress-content": "One of the visual effects that was very important for this game was to see the progress of the player in the labyrinth when they answer a question properly. To make this happen, we really wanted to make the progress bar go through the labyrinth rather than have a regular progress bar. To implement this feature, we have established locations in the labyrinth allowing us to find the intersections in the labyrinth. Then, we have created an object that needs those two points to make a line and when we generate them, we keep the total length of the bar. Afterwards, with the percentage of answered questions, we fill out the progress bar. We also had to adapt the visual to the different screen resolutions.",
        "projects-bambooza-my-role": "My role",
        "projects-bambooza-my-role-content": "For this project, we have collaborated with the teams of Eckinox and Totema Studio. The team of Totema Studio did all of the game design and the team at Eckinox made all of the web systems, including the API, the save of all the information and session management. All I needed to do, along with two other students, was to program the games for the platform. However, to be able to interact with the systems made by Eckinox, we needed to learn new technologies to complete this project. Those technologies where Node Packet Manager, Typescript, Vue 3.0 and Phaser.<br><br>For this project, I needed to make a global and versatile class for the interactible elements fo the games as well as two games, the Labyrinth of Inhibition and the Cauldron of Organisation.",
        //////////////////////////////////////////////////////////////////////
        "projects-disclaimer": "Click on the project banner to show the content.",
        //////////////////////////////////////////////////////////////////////
        "projects-encage-ai": "Artificial Intelligence",
        "projects-encage-ai-introduction": "The biggest challenge of our project was without a doubt the artificial intelligence of the birds. Since the heart of our game stands on capturing and hunting birds for the family company, we had to make sure the bird had the behaviour of a real life bird. This task ended up being more complicated than we first anticipated since we did not have much experience using artificial intelligence with Unreal Engine. I helped my colleagues a lot with different algorithms, such as the destination selection and the movement, but the main aspect I had to work on was the detection of the movement, the decision making of the bird as well as obstacle avoidance.",
        "projects-encage-ai-detection": "Detection",
        "projects-encage-ai-detection-content": "For the detection, we had to change the behaviour of the bird based on the movement of the character. The detection of the bird will use two senses, which are vision and sound. For the sound, the faster the character moves, the more the noise will get detected and the bird will react accordingly. The detection zone for the is the bigger circle shown in the picture on the right. Depending on  the strength of the sound, a proportional part of the circle will be used. This proportion is based on the current speed of the character and the maximum speed of the character. So, if the character runs at 50% of the character's speed, only 50% of the circle will be used to detect the sound.",
        "projects-encage-ai-detection-content-next": "Next is the visual detection of the bird. The detection only occurs when the character is in the 60 degree field of view in front of the bird in the small circle shown in the picture above. The visual sense is more punishing for the player than the sound sense since the bird will feel more at risk since the character is really close to the bird. We also had a bug regarding the detection that would prevent the sound and visual sense to be detected at the same time. I had to dig deeper into the Unreal Engine game engine, but I finally found the variable where all the sense are stored and I can see individually if they are activated. Therefore, everytime the perception is updated, I verify whether or not each sense is activated. Once the detection is done, we have a function that gets triggered every 50 milliseconds that will change the deteection force on the bird and when the bird reaches a specific threshold, it will fly away from the player.",
        "projects-encage-challenges": "Conception challenges",
        "projects-encage-challenges-content": "The biggest hurdle during our concept was without a doubt the creation of the artificial intelligence of our bird. We have dedicated 4 sprints in order to complete it, which is nearly 2 months. Even though we had a lot of experience and skills as developpers, we had little to no experience using artificial intelligence and it is incredibly more difficult to debug artificial intelligence than it is to debug anything we have debugged before, such as JavaScript in website applications, console applications in C++ or C# or even mobile applications in Java. There were a lot of times where we spent multiple hours debugging a behaviour within our artificial intelligence, just for us to change one condition in the decision making for it to work properly. However, this challenge has allowed us to familiarise ourselves with artificial intelligence within Unreal Engine and we are now able to make complex behaviours with this tool.",
        "projects-encage-challenges-content-next": "Another challenge we have faced was to collaborate with artists from the NAD school (School of numerical arts, of animation and of design) for the creation of our game. Even though the experience was amazing and removed a big weight off of our shoulders, it was still something we had to adapt to since it was a new experience to work with artists. There were two major things we had to do when collaborating with them, such as making sure communicate regularly with our game designer in order to make sure we were going in the right direction when developing our artificial intelligence and when we were developing the orders, and making sure we were exposing the right variables in order for the technical artist to link the code to the visual.",
        "projects-encage-introduction": "<i>Héritage</i> is a story game that invites you to question the intergenerational beliefs and practices. You play a young Québec woman in the early 20<sup>th</sup> century who inherited the family's company. Rediscover your childhood memories, complete orders and dive into the story of this young woman and her generational company.",
        "projects-encage-introduction-title": "Introduction",
        "projects-encage-link": "<a href=\"https://chaos-production.itch.io/heritage\" target=\"_blank\" class=\"card-url\"><div><strong>Try the game here!</strong></div></a>",
        "projects-encage-members": "Members of the team",
        "projects-encage-my-role": "My role",
        "projects-encage-my-role-content": "On the programming standpoint, there were two main parts to this project, the artificial intelligence as well as the orders that the main character has to complete. Both of theses parts has brought us numerous challenges that we had to overcome in order bring the players to experience the early 20<sup>th</sup> century in Quebec within our gameplay.",
        "projects-encage-oa": "Obstacle avoidance",
        "projects-encage-oa-introduction": "An integral part for the movement of our artificial intelligence was the obstacle avoidance. This brought us a lot of challenges and troubles, since the behaviour that came out of some of our iterations were pretty atrocious. Here are some examples of behaviours that we have seen while testing our obstacle avoidance behaviour:",
        "projects-encage-oa-item1": "The bird would infinite back-and-forths within two directions since our algorithm chose the direection that was closest to the final destination.",
        "projects-encage-oa-item2": "When the bird was too close to the wall, it would try non-stop to fly through that wall.",
        "projects-encage-oa-solutions": "First of all, in order for our algorithm to trigger, we need the raycast that the bird sends out when he moves to hit a solid surface that the bird cannot go through. Once it is confirmed that surface has been hit, we send out another 8 raycasts in the shape of a cone. All of the casts that have not hit a surface will get added to a list of possible directions. If this list is empty after all 8 raycasts, we send out another 4, one to the right of the bird, one to the left, one on top of the bird and the last one under the bird. If they don't hit any surface, they get added to the list of possible directions. Once we have at least one possible direction, we validate all these points and we compare them to select the point that is closest to the final destination. To fix the first behaviour that we have encountered mentioned above, we have changed our point selection algorithm to compare the points and remove the height from the points, that way the back-and-forth stops. Another solution we have implemented to fix this problem is to create a bias within our algorithm, that way it will favour the previously used direction when it goes to avoid an obstacle if it is available. To fix the second problem, we have noticed that the two levels of raycasts managed to fix the bird getting stuck on walls.",
        "projects-encage-orders": "Orders",
        "projects-encage-orders-generation": "Automatic generation of the orders",
        "projects-encage-orders-generation-content": "After we survey every single feather, we have to create the orders so the players can complete them. We have four random values when we generate orders. The first one decides the amount of feathers we need to complete the order, varying between 1 and 3. The second random number is reused multiple times. This value is used to select a feather from the global list of feathers, adds it to the order, and removes it from the global list of feathers. The other two random values are used to choose textures for the user interface to ensure that every order has unique visuals.",
        "projects-encage-orders-introduction": "The second most important part of the game on the programming side is the completion and generation of orders. There were a couple of constraints in the creation of orders that caused us a couple of headaches. For my part, I had to automatically generate the orders and I had to make sure that it was possible to complete all of the orders within one game loop.",
        "projects-encage-orders-validation": "Making sure it is possible to complete every order",
        "projects-encage-orders-validation-content": "When the birds are generated, they are randomly assigned a color. We can then see three colors of birds, blue, red and yellow. Since we don't know the amount of each birds of each colors, we have to grab this information when we create the birds. Every time a bird is added to the game, we add the specific feather to a list of feathers in the game state. Once we have gotten every single feather, we generate the commands based off of this list.",
        "projects-encage-seeds": "New mechanic: Seeds",
        "projects-encage-seeds-content": "For the next part of the game, we wanted to introduce a new mechanic in the game to add a new level of complexity into it. We have decided to add a bait mechanic in forms of seeds with the goal to attract the birds into one area in order to capture them. This also allowed our level designer to place birds in high places and make them inaccessible to the players unless they use our bait mechanic.",
        "projects-encage-seeds-changes": "Required Changes",
        "projects-encage-seeds-changes-content": "To make this mechanic work, we needed to add features to both our player and the birds. First, we needed to add the ability for the player to place the seeds. Next, for the birds, we needed to add a lot more functionalities. First, we need to make sure the birds could detect the seeds. This part was pretty simple since we could use a Environment Query System (EQS) query to find the bait around the bird. Afterwards, after detecting the seeds, the bird needs to go to the seed. This was pretty simple since we already made our custom movement for the bird, so we just need to specify the position to the task and it will fly to that position. For the last part, we needed to change the detection system so the birds would be less reactive to the player when it is eating. We have decided the birds would be 50% less reactive when it is eating.",
        //////////////////////////////////////////////////////////////////////
        "projects-genetic-warfare-link": "<a href=\"https://davidnina1.itch.io/genetic-warfare\" target=\"_blank\" class=\"card-url\"><div><strong>Try the game here!</strong></div></a>",
        "projects-genetic-warfare-intro": "",
        //////////////////////////////////////////////////////////////////////
        "projects-hamstorm-camera-management": "Camera Management",
        "projects-hamstorm-camera-management-content": "The camera management is a vital part of the game since it allows to change our perspective of the puzzle and better understand how each part of the puzzle interacts with each other. We have an isometric camera view that can rotate at 90&deg; intervals, we can zoom and unzoom and we can also move the camera using the <i>WASD</i> keys on our keyboard. All those features allow the player to better understand the puzzle or allow the player to see the puzzle from another angle which could help them get further into the game.",
        "projects-hamstorm-challenges": "Conception challenges",
        "projects-hamstorm-challenges-content": "For the conception challenges, the biggest problem we encountered was the synchronization of the turns and the elements that mold a turn. Most of the time we have spent on this project was to fix bugs that came from the behaviors of multiple parts of the game and how they interacted with our turn revert system. If I look at the list of bugs we kept throughout our semester, I would say all of the gameplay elements have had at least one bug with our revert system. However, another one of our biggest challenges was the integration of our gameplay elements with the visuals with the help of our technical artist. To show the full functionality of our gameplay elements, most of our actions have at least one or multiple visual feedback that we linked with the help of our technical artist and this has brought us problems with the synchronization of actions and the end of the actions. After a lot of time, we have successfully integrated all our visual effects thanks to our technical artists and our visual feedback works wonderfully.",
        "projects-hamstorm-description": "Game Description",
        "projects-hamstorm-description-content": "The mines of the great city of Hamsteria were peaceful and thriving, until the day the horrible rats of the Chedd'Ore clan attacked! Now, the valiant Hamstörm must go back to the city to warn the people about the arrival of these nasty rodents in their tunnels.<br>Travel through a fun and colorful puzzle game, in which you will help Hamstörm make his way inside the mine's tunnels, now infested with terrible rats! Whether it'd be by destroying crystals, shattering the ground beneath their feet or by setting off traps, you'll need every trick in the book to make it out in time!",
        "projects-hamstorm-enemy-behavior": "Enemy Behavior",
        "projects-hamstorm-enemy-behavior-content": "The behavior of the enemies is rather simple for each one. First and foremost, the is Soop which is static and will attack Hamstörm when he is standing on the tile in front of him. Then, Gouda will always patrol his pattern and will only attack Hamstörm when he is going on the tile that Hamstörm is on. Finally, Slinky will only move once Hamstörm is in his line of sight. If Slinky makes it to the end of his trajectory, Slinky will go back towards its initial position and will continue to look for Hamstörm.",
        "projects-hamstorm-future": "Future of the project",
        "projects-hamstorm-future-content": "We will present our project at the <i><a href=\"https://imaginad.ca/\" target=\"_blank\">ImagiNAD 2024</a></i>, an event organised by the NAD-UQAC school that showcases the projects made by the graduating class of the school. This event will occur on May 6<sup>th</sup>, 2024 and we will present our project to industry experts and the public that will attend the event. We will also publish the game on Steam at the end of the month of May. There are a couple of features we want to add before the game is published, such as changing the skin on Hamstörm as well as fixing more bugs. The game will be available on Steam before the beginning of summer.",
        "projects-hamstorm-link": "<a href=\"https://store.steampowered.com/app/2944680/Hamstrm/\" target=\"_blank\" class=\"card-url\"><div><strong>Add Hamstörm to your Steam wishlist!</strong></div></a>",
        "projects-hamstorm-movement": "Turn by Turn Movement of the Character and the Enemies",
        "projects-hamstorm-movement-content": "For the turn-by-turn movement, we had to establish a definition of a turn. At the start of the project, a turn was defined by the movements of the characters, Hamstörm and the rats. After the rats are done moving, Hamstörm is finally able to move again. After each movement, the turn count was increased, so each movement of one tile counted as a turn. However, to invite the player to click further, we have changed the incrementation of turn only to when Hamstörm reaches the tile we have clicked on. With this change, if the player wants to click four tiles away from the initial position, this movement will only count for one turn. Everything worked well with this system, until we implemented the turn reversion system.",
        "projects-hamstorm-movement-character": "Character Movement",
        "projects-hamstorm-movement-character-content": "The movement of the characters include Hamstörm and the rats, Gouda and Slinky. Each of these characters have their own quirks in the functionality of their movement, which means we had to modify their implementations for each of these characters depending on the behavior we wanted them to have.",
        "projects-hamstorm-movement-character-gouda": "Gouda and its Tile List",
        "projects-hamstorm-movement-character-gouda-content": " Gouda's movement is made from tile to tile from a list of predetermined tiles. This list is exposed in the Unreal Editor so our game/level designer can choose the path Gouda will take. If our game designer forgets to set the tiles Gouda can go to, we show a message on screen to indicate the character does not have a set path and therefore cannot move. Gouda will also look at the next tile it will move to and his path can also be changed if the player destroy obstacles in its path.",
        "projects-hamstorm-movement-character-hamstorm": "Hamstörm and his Tile Detection",
        "projects-hamstorm-movement-character-hamstorm-content": "The unique component of Hamstörm's movement is that we need to detect where the player can move depending on his position and his environment. For Hamstörm's movement detection, we need to analyze everything around, whether they are tiles, walls or destructible objects. Each of those components require different behaviors, such as adding a to the list of possible tiles, stopping the analysis for this specific side or adding the object to the list of possible destructible objects. A destructible object can also stop the analysis for the side if it is too far from the player. Also, if the player clicks on a tile that is further than the one next to the player, we need to make an analysis to see what the next tile we need to go to is and we add the clicked tile of a queue for the next turn and we do the same analysis all over again until we reach the clicked tile.",
        "projects-hamstorm-movement-character-slinky": "Slinky and his Predatory Instinct",
        "projects-hamstorm-movement-character-slinky-content": "Slinky has the same movement base as Gouda but has a specific feature that makes him different from Gouda. Slinky has the visual ability of a predator and as soon as Hamstörm gets in his line of sight, he will start to pursue him quickly. Slinky will run to his end destination and will come back to his original spot and will continue to search for its prey. Slinky moves two tiles at once, so we really need to be careful with our movements when we face this enemy.",
        "projects-hamstorm-movement-revert": "Modifying our turn-by-turn due to the revert system",
        "projects-hamstorm-movement-revert-content": "The different components of the game have their own behaviors and all have an impact on the puzzles of each level. Whether it be enemies, walls, destructible floors or wall traps, our game/level designer has placed each gameplay element so it can have an impact on how the puzzle is solved. For everything to be coherent with the rest of the game, we needed to change the conditions that determined the end of a turn, since it is possible that some actions end after the movement of all the rats have ended. We have added three new conditions for the turn to end. First, there needs to be no enemies attacking the player, second, there needs to be no enemies playing their death animation and lastly there needs to be no projectiles moving across the level.",
        "projects-hamstorm-myrole": "My Role",
        "projects-hamstorm-myrole-content": "For this project, I joined a team of artists that made a prototype of the game the previous semester. We are two programmers that joined the team for the semester. To make it to the final product, we needed to redo the mechanics in C++ and implement the new game mechanics. We needed to implement the turn-by-turn movement, including the movement of the main character and the enemies, the destruction of the environment, the enemy behaviors, the camera management as well being able to revert turns.",
        "projects-hamstorm-revert": "Reverting Turns",
        "projects-hamstorm-revert-content": "We started implementing the reverting system around the middle of the semester. This mechanic added a new complexity to the functionalities of the game since every user action as well as the actions of the environment needs to be recorded and needs to be recorded in order and in the right turn. At the beginning, the definition of a turn was really simple, a turn starts when the player can t  ake actions and ends when the enemies end their movements. However, this has brought a lot of bugs to the game due to this definition.",
        "projects-hamstorm-revert-bugs": "Bugs encountered during the implementation of the turn reversion",
        "projects-hamstorm-revert-bugs-content": "We encountered a lot of bugs when implementing this new system. One of the bugs we encountered was when we suffered a death from Soop in a level where there were no moving rats, the death ended up registering in the next turn instead of being in the turn of the movement. To fix this issue, we have added a new condition to end the turn which states that there needs to be no rat attacking Hamstörm to end the turn. Another bug we encountered was linked to the wall trap's projectile. When there was a projectile in movement, it could kill a rat at the end of a turn and its death would register only in the next turn. To fix this bug, we added two new conditions to end the turn, which are that a projectile cannot be in movement and a rat cannot be dying. These were mostly the bugs we encountered while developing this new system.",
        //////////////////////////////////////////////////////////////////////
        "projects-home-content": "I invite you to visit my projects page. This page has everything regarding my video game projects."
    },
    "fr": {
        "about-me": "À propos",
        "about-me-cegep": "CÉGEP de l'Outaouais",
        "about-me-cegep-content": "J'ai choisi l'informatique de gestion au Cégep de l'Outaouais puisque je souhaitais devenir programmeur et ce programme me permettais d'apprendre la programmation, tout en se spécialisant vers le développement web que j'ai commencé à apprendre durant mes études au secondaire. À cet établissement, j'ai appris la base de la programmation, notamment la programmation orienté objet, le développement web avec différents framework (ASP.NET MVC, Laravel, etc.), le développement d'applications mobile ainsi que de la programmation réseau.",
        "about-me-cegep-information": "Diplôme d'étude collégiale en informatique de gestion, 2016-2020",
        "about-me-cf-title": "ColdFusion",
        "about-me-cf-content": "<i>Adobe ColdFusion 2018</i> est un langage de programmation et de balisage que j'ai utilisé lors de mon temps au Gouvernement du Canada. C'est un langage qui facilite la création d'application web avec accès à une base de donnée. Ce langage est facile à apprendre et permet de développer des applications web très rapidement.",
        "about-me-csharp-title": "C#",
        "about-me-csharp-content": "Le C# est le tout premier langage de programmation que j'ai appris. Puisque sa structure est simple, c'est probablement mon langage de programmation préféré à utiliser. J'ai fait beaucoup d'applications console, des applictions formulaires, du code serveur pour un site web et des jeux avec le Moteur <i>Unity</i> avec ce langage.",
        "about-me-cpp-title": "C++",
        "about-me-cpp-content": "Le C++ est le langage que j'ai appris le plus récemment. Je n'ai que commencé à l'apprendre au début de l'université, mais j'ai eu beaucoup d'opportunités à l'utiliser puisque nous utilisons beaucoup le moteur de jeux <i>Unreal Engine</i> et que les cours généraux en informatique nous demandent d'utiliser ce langage de programmation. J'ai réussi à maîtriser la programmation orienté objet et les pointeurs dans ce langage de programmation.",
        "about-me-home-content": "Visitez ma page À propos. Dans cette page, vous pourrez en apprendre un peu plus à propos de moi, mes compétences ainsi que mon expérience.",
        "about-me-introduction": "Je suis Éric Hébert, un étudiant en développement de jeux vidéo à l'Université du Québec à Chicoutimi. Depuis que je suis jeune, je suis intéressé par l'informatique et les jeux vidéo. Je me rappelle de jouer à la <i>Nintendo 64</i> avec mes frères ou même à <i>Runescape</i> sur nos ordinateurs. Cette passion, développé depuis ma jeunesse, m'a porté à changer du développement web vers le développement de jeux vidéo.",
        "about-me-java-title": "Java",
        "about-me-java-content": "Le Java est un langage que je n'ai pas beaucoup utilisé, mais qui est similaire au C#. Je l'ai surtout utilisé pour le développement d'applications mobiles et pour la programmation réseau.",
        "about-me-js-title": "JavaScript",
        "about-me-js-content": "Le JavaScript est un langage obligatoire à maîtriser pour la création de site webs modernes. J'ai eu la chance d'utiliser le JavaScript sous différentes formes et avec beaucoup de différentes librairies. J'ai utilisé jQuery et VueJS, et j'ai aussi utilisé le moteur de jeu PhaserJS, qui permet de créer des jeux vidéo 2D sur des pages web. J'ai aussi utilisé TypeScript, qui est un JavaScript qui force l'utilisation de types d'objets.",
        "about-me-skills": "Compétences",
        "about-me-skills-content": "",
        "about-me-sql-title": "SQL",
        "about-me-sql-content": "Le SQL est un langage qui est essentiel pour la gestion d'une grande quantité de données. Les deux types de base de données que j'ai utilisés sont <i>Microsoft SQL Server</i> et <i>MySQL</i>. J'ai aussi utilisé le SQL avec des sites webs, principalement en utilisant <i>ASP.NET MVC</i> avec <i>Entity Framework</i>, Laravel avec <i>MySQL</i> et <i>Adobe Coldfusion</i> et <i>Microsoft SQL Server</i>.",
        "about-me-studies": "Études",
        "about-me-university": "Université du Québec à Chicoutimi",
        "about-me-university-content": "J'ai choisi le développement en jeux vidéo cet université puisque j'avais déjà entendu de cet université lors de mon temps au CÉGEP. Grâce à mon parcours académique à cet université, j'ai appris à programmé en C++, tout le processus de développement de jeux vidéo, notamment la conception, répondre aux besoins d'un client, collaborer avec des artistes, et le développement de jeux avec les moteurs Unreal Engine ainsi que Unity 3D.",
        "about-me-university-information": "Baccalauréat en développement de jeux vidéo, 2021-2024",
        "developer": "Éric Hébert",
        "developer-info": "Développeur de jeux vidéo",
        "developer-info-content": "Je suis Éric Hébert, un étudiant en développement de jeux vidéo à l'Université du Québec à Chicoutimi. Je suis habile avec plusieurs moteur de jeux, notamment Unreal Engine, Unity 3D ainsi que PhaserJS. Je vous invite à naviguer mon site.",
        "empty": "",
        "home": "Accueil",
        "lang": "EN",
        "projects": "Projets",
        //////////////////////////////////////////////////////////////////////
        "projects-bambooza-article": "<a href=\"https://ici.radio-canada.ca/nouvelle/2021611/deficit-attention-jeu-interactif\" target=\"_blank\" class=\"card-url\"><div><strong>Article de Radio-Canada du lancement de la plateforme <i>Bambooza</i></strong></div></a>",
        "projects-bambooza-cauldron": "Chaudron",
        "projects-bambooza-cauldron-content": "Le deuxième jeu que j'ai fait est le chaudron. Ce jeu était beaucoup plus difficile que le labyrinthe. Le jeu avait pour but d'améliorer l'organisation du joueur. Ce jeu avait beaucoup de composante, soit les ingrédients, les recettes et les bols. La partie la plus difficile de jeu était les bols. ",
        "projects-bambooza-cauldron-bowl": "Bol",
        "projects-bambooza-cauldron-bowl-content": "L'utilisation des bols est la partie la plus important de ce jeu puisque c'est l'outil qui est utilisé pour bien comprendre l'importance de l'organisation. Dans le jeu, il y a cinq bols différents ce qui permet au joueur de bien trier les ingrédients selon leur système de tri qui leur convient le mieux. La partie la plus difficile lors du développement de ce système est la réorganisation des ingrédients à l'intérieur du bol.",
        "projects-bambooza-cauldron-bowl-reorganisation": "Réorganisation des ingrédients",
        "projects-bambooza-cauldron-bowl-reorganisation-content": "Nous avons trois manière de réorganiser les ingrédients, placer l'ingrédient à la fin du bol, placer l'ingrédient entre deux ingrédients et échanger deux ingrédients de position. Pour placer l'ingrédient à la fin du bol, il faut juste placer l'ingrédient sur le bol lorsqu'il est fermé ou le mettre le plus bas possible dans le bol. Pour le placer entre deux ingrédients, il faut le mettre entre deux ingrédients de la même rangée. Pour échanger deux ingrédients de places, il faut mettre l'ingrédient par dessus un autre ingrédient du bol.",
        "projects-bambooza-cauldron-recipes": "Recettes et ingrédients",
        "projects-bambooza-cauldron-recipes-content": "Le but principal de ce jeu est compléter des recettes affichés au dessus du chaudron à l'aide des ingrédients fournis à la droite. Cependant, le nombre d'ingrédients est très haut et ils s'empilent un par dessus l'autre, ce qui devient une tâche difficile à accomplir. Nous avons fait que chaque ingrédient soit réutilisable puisqu'ils apparaissent dans plusieurs recettes et ceci force le joueur à bien organiser ses ingrédients pour bien s'y retrouver. Pour les ingrédients et les recettes, j'ai du utiliser l'API créé par Eckinox pour les intégrer dans notre jeu. Pour compléter les recettes, il suffit de prendre les ingrédients et de les placer sur le chaudron. Pour faciliter le travail du joueur et de les aider à s'organiser, nous avons créé des bols pour garder des ingrédients.",
        "projects-bambooza-challenges": "Défis de conception",
        "projects-bambooza-challenges-content": "Le plus gros défi de conception pour ce projet est de devoir collaborer avec plusieurs équipes différentes sur le projet. Nous devions collaborer avec plusieurs équipes de production pour différents aspects du projet, notamment Totema Studio pour le développement des jeux de la plateforme ainsi qu'Eckinox pour toutes les technologies webs.",
        "projects-bambooza-global-class": "Classe globale et versatile",
        "projects-bambooza-global-class-content": "Pour ce projet, nous avons décidé de faire une classe globale qui englobe la classe <i>Sprite</i> de <i>Phaser</i>. La raison que nous avons décidé d'ajouter une classe globale au projet est pour simplifier l'initialisation de nos objets, puisque la création d'objets <i>Phaser</i> peut devenir assez lourd. Cette classe permet l'initialisation des interactions de l'objet, les collisions de l'objet, création de l'image, ajout de text sur l'image et plus encore.",
        "projects-bambooza-introduction": "<i>Bambooza</i> est une plateforme de jeu en ligne en collaboration avec <a href=\"https://www.pandaslsj.org/\" target=\"_blank\">Panda Saguenay Lac Saint-Jean</a>, <a href=\"https://www.eckinox.ca/\" target=\"_blank\">Eckinox</a> et <a href=\"https://totemastudio.com/\" target=\"_blank\">Totema Studio</a>. Cette plateforme est composé de sept jeux différents dans le but d'aider les personnes atteints de TDAH (Trouble du Déficit de l’Attention avec/sans Hyperactivité) dans le milieu professionnel.",
        "projects-bambooza-labyrinth": "Labyrinthe",
        "projects-bambooza-labyrinth-content": "Le premier jeu que j'ai fait est le labyrinthe. Le jeu en tant que tel est assez simple, c'est un jeu où il y a une question avec deux réponses possibles et lorsqu'on répond correctement à la question, on avance dans le labyrinthe. Il y a deux choses qui a pris plus de temps dans ce jeu, soit l'intégration des questions et l'affichage du progrès dans le labyrinthe.",
        "projects-bambooza-labyrinth-integration": "Intégration des questions",
        "projects-bambooza-labyrinth-integration-content": "Pour l'intégration des questions, nous avions pensé initalement faire un fichier JSON qui contient les questions. Les questions seraient composés de quelques attributs, soit le texte de la question, la couleur du texte, ainsi que les réponses possibles. Les réponses auraient aussi quelques informations, notamment le texte ainsi que si c'est la bonne réponse. Ce système fonctionnait bien, mais il ne permettait pas d'ajouter des questions/réponses dynamiquement. Nous avons opter pour changer le système, en gardant les attributs, mais en gardant les questions et réponses dans une base de données que les clients pouvaient accéder pour ajouter/supprimer/modifier des questions à l'aide d'une interface web. Nous devions donc changer l'implémentation pour utiliser l'API développé par <i>Eckinox</i> pour récupérer les questions et réponses.",
        "projects-bambooza-labyrinth-progress": "Progrès dans le labyrinthe",
        "projects-bambooza-labyrinth-progress-content": "Un des aspects visuels qui était important pour le jeu est de voir le progrès du joueur dans le labyrinthe lorsqu'il complète les questions. Pour ce faire, on voulait vraiment que la barre de progrès complète le labyrinthe au lieu que ce soit une barre de progrès normale. Pour l'implémenter, nous avons établit des points dans le labyrinthe qui permet de situer les intersections du labyrinthe. Ensuite, nous avons créer des objets qui nécessite deux de ces points pour faire une ligne et nous gardons la longueur totale pour la barre. Par après, avec le pourcentage de questions répondues, nous remplissons la barre de progrès. Nous avons aussi du adapter le visuel pour les différentes résolutions d'écran.",
        "projects-bambooza-link": "<a href=\"https://jeux.bambooza.ca\" target=\"_blank\" class=\"card-url\"><div><strong>Lien vers la plateforme</strong></div></a>",
        "projects-bambooza-my-role": "Mon rôle",
        "projects-bambooza-my-role-content": "Pour ce projet, nous avons collaboré avec les équipes d'Eckinox et de Totema Studio. L'équipe de Totema a fait tout le game design et l'équipe d'Eckinox ont fait tous les systèmes web, dont l'API et toute la sauvegarde d'information et de session. Tout ce que je devais faire, avec deux autres collègues étudiants, était de programmer les jeux. Cependant, pour pouvoir interagir avec les systèmes d'Eckinox, nous avons du apprendre de nouvelles technologies pour pouvoir compléter le projet. Ces technologies sont <i>Node Packet Manager</i>, <i>Typescript</i>, <i>Vue 3.0</i> et <i>Phaser</i>.<br><br>Pour le projet, j'ai fait une classe globale et versatile pour les éléments interactifs des jeux, ainsi que deux jeux, le <i>Labyrinthe de l'inhibition</i> et le <i>Chaudron de l'organisation</i>.",
        ////////////////////////////////////////////////////////
        "projects-disclaimer": "Cliquez sur la bannière du projet pour afficher le contenu.",
        ////////////////////////////////////////////////////////
        "projects-encage-ai": "Intelligence artificielle",
        "projects-encage-ai-detection": "Détection",
        "projects-encage-ai-detection-content": "Pour la détection, nous devions changer le comportement de l'oiseau dépendamment du mouvement du joueur. L'oiseau va se baser sur deux sens, soit la vision et le son. Au niveau du son, plus que le personnage bouge rapidement, plus que l'oiseau va réagir. La zone de détection du son est le plus gros cercle montrer dans l'image ci-contre. Selon la force du son, une certaine partie proportionnelle à la force du son est utilisée. Cette proportion est basée sur la vitesse courante du joueur sur la vitesse maximale du joueur. Donc, si le joueur court à 50% de la vitesse maximale, la proportion utilisée du cercle sera de 50%.",
        "projects-encage-ai-detection-content-next": "Ensuite, il y a la détection visuelle de l'oiseau. Celui-ci est seulement visible dans une zone correspondant à 60 degrés en avant de l'oiseau dans le petit cercle montré dans l'image ci-haut. Cette section est plus punitive que le son puisque l'oiseau se sent plus en danger lorsque le personnage est aussi proche de lui. Nous avions eu un bogue relié à la détection qui empêchait que le son et la vue d'être détecté en même temps. J'ai du regarder un peu plus profondément dans le moteur d'<i>Unreal Engine</i>, mais j'ai trouvé un endroit où sont stocké les sens et on peut voir s'ils sont activé en même. Donc, à chaque que la perception est mise à jour, je vérifie si les deux sens sont activés en même temps. Une fois que la détection est faite, nous avons une fonction qui s'exécute à chaque 50 millisecondes qui change la force de détection de l'oiseau et lorsque l'oiseau atteint un certain taux, il va s'enfuir loin du personnage.",
        "projects-encage-ai-introduction": "Le plus grand défi de notre projet était sans aucun doute l'intelligence artificielle des oiseaux. Puisque le coeur de notre jeu repose sur la capture d'oiseau pour l'entreprise familiale, nous devions nous assurer que l'oiseau ait le comportement d'un oiseau de la vie de tous les jours. Ceci était plus compliqué que nous le pensions puisque nous n'avions pas beaucoup d'expérience avec l'intelligence artificielle dans <i>Unreal Engine</i>. J'ai beaucoup aidé mes collègue dans l'algorithme sélection de destination et de mouvement, mais ma principale partie dans l'intelligence artificielle de notre oiseau est la détection du mouvement, la prise de décision de l'oiseau ainsi que l'évitement d'obstacles.",
        "projects-encage-challenges": "Défis de conception",
        "projects-encage-challenges-content": "Le plus gros défi de conception que nous avons était sans doute le développement de l'intelligence artificielle de notre oiseau. Nous avons dédié 4 sprints pour le compléter, soit presque deux mois. Bien que nous avions beaucoup d'expérience et de compétences en tant que programmeurs, nous avions peu d'expérience avec l'intelligence artificielle et c'est tellement plus complexe déboguer de l'intelligence artificielle tout ce que nous avions déboguer avant, soit du JavaScript en web ou des applications console en C++ ou C# ou même des applications mobiles en Java. Il y a plusieurs moments où nous avions passé quelques heures à déboguer un comportement de notre intelligence artificielle, juste pour que nous changions une condition dans la prise de décision et que ça fonctionne. Bref, ce défi nous a permis de nous familiariser avec l'intelligence artificielle avec <i>Unreal Engine</i> et nous sommes maintenant capable de faire des comportements complexes avec cet outil.",
        "projects-encage-challenges-content-next": "Un autre défi que nous avons eu était de collaborer avec les artistes du NAD (École des arts numériques, de l'animation et du design) pour la création de notre jeu. Quoi que l'expérience soit fabuleuse et qu'il nous enlève beaucoup de travail côté visuel, c'est quelque chose à laquelle nous avons dû nous habituer puisque c'était une nouvelle expérience. Les deux choses que nous devions faire était de communiquer régulièrement avec notre game designer pour s'assurer que nous allions dans la bonne direction lors du développement de notre intelligence artificielle et lors du développement des commandes, ainsi que d'exposer des variables pour que notre artiste technique puisse lier les données de notre code et le visuel.",
        "projects-encage-introduction": "<i>Héritage</i> est un jeu narratif qui vous invite à remettre en question les préconceptions et croyances générationnelles. Vous incarnez une jeune fille québecoise dans les années 1910 ayant hérité de son entreprise familiale. Redécouvrez vos souvenirs d'enfance, complétez des commandes et plongez-vous dans l'histoire de cette jeune fille et de son commerce familial.",
        "projects-encage-introduction-title": "Introduction",
        "projects-encage-link": "<a href=\"https://chaos-production.itch.io/heritage\" target=\"_blank\" class=\"card-url\"><div><strong>Essayez le jeu ici!</strong></div></a>",
        "projects-encage-members": "Membres de l'équipe",
        "projects-encage-my-role": "Mon rôle",
        "projects-encage-my-role-content": "Du point de vue de la programmation, nous avions deux grandes parties dans le projet, soit l'intelligence artificielle ainsi que les commandes que notre personnage principal doit compléter. Ces deux parties ont apporté différents défis que nous avons du relevé pour que notre jeu puisse avoir un <i>gameplay</i> qui transporte les joueurs au Québec au début du 20<sup>e</sup> siècle.",
        "projects-encage-oa": "Évitement d'obstacles",
        "projects-encage-oa-introduction": "Une partie intégrale pour le mouvement de notre intelligence artificielle est l'évitement d'osbtacles. Ceci nous a porter beaucoup de troubles, puisque le comportement que nous avions donnait des résultats plutôt grotesque. Voici des exemples de comportement que nous avions tout en testant notre algorithme d'évitement d'obstacle:",
        "projects-encage-oa-item1": "L'oiseau faisait un va-et-vient entre deux directions puisque notre algorithme choisissait la direction le plus proche de la destination.",
        "projects-encage-oa-item2": "Lorsque l'oiseau était trop proche d'un mur, l'oiseau essayait sans cesse de voler à travers le mur.",
        "projects-encage-oa-solutions": "Tout d'abord, pour que notre algorithme se déclenche, il faut que le <i>raycast</i> que l'oiseau lance lorsqu'il bouge entre en contact avec une surface solide que l'oiseau ne peut pas traverser. Lorsqu'il confirme qu'il a touché cette surface, nous lançons 8 autres raycast en forme de cône. Tous ceux qui ne touche rien se font ajouter à une liste de points possibles. Si la liste est vide, nous lançons 4 autres raycast, un à sa droit, un à sa gauche, un au dessus de lui et le dernier sera lancé en dessous de lui. S'ils ne touchent rien, ils se font ajouter à la liste de points possibles. Une fois que nous avons des points possibles, nous vérifions tous les points et on les compare pour ensuite sélectionner le point le plus proche de la destination finale. Pour régler le premier problème mentionné plus haut, nous avons changé notre algorithme de sélection de point pour comparer les points retirant la hauteur des points, comme ça le va-et-vient puisse arrêter. Une autre solution que nous avons implémentés pour régler notre algorithme est de la rendre biaisé, c'est-à-dire que l'algorithme va privilégier utiliser le même côté d'évitement s'il est disponible. Pour régler le deuxième comportement, nous avons remarqué que les deux niveaux de <i>raycasts</i> ont permis de réglé ce problème.",
        "projects-encage-orders": "Commandes",
        "projects-encage-orders-generation": "Génération automatique des commandes",
        "projects-encage-orders-generation-content": "Après avoir sondé toutes les plumes, il faut créer les commandes que le joueur puisse faire. Nous avons 4 valeurs aléatoires dans la génération des commandes. La première est pour décider le nombre de plumes que nous allons avoir dans la commande, variant entre 1 et 3. La deuxième est pour réutilisé plusieurs fois. Cette valeur permet de prendre une plume parmis la liste de plumes, l'ajouter dans la commande et ensuite la retirer de la liste globales de plumes. Les deux autres valeurs aléatoires permettent de choisir des textures pour l'interface utilisateur, de sorte à ce que les commandes ont un visuel différents.",
        "projects-encage-orders-introduction": "La deuxième partie la plus importante du jeux côté programmation est la complétion des commandes. Il y a quelques contraintes dans les commandes qui nous a donné quelques maux de têtes. De ma part, je devais m'occuper de la génération automatique des commandes et de s'assurer que la complétion de l'ensemble des commandes soient possibles.",
        "projects-encage-orders-validation": "Assurer la complétion de l'ensemble des commandes",
        "projects-encage-orders-validation-content": "Lorsque les oiseaux se font générés dans le jeu, ils se font assignés aléatoirement une couleur. On pourra ensuite voir des oiseaux de trois couleurs, bleu, rouge ou jaune. Comme on ne sait pas le nombre de chaque couleur d'oiseau, nous devons obtenir ses informations lors de leur création. À chaque fois qu'un oiseau est ajouté, nous ajoutons cette plume à la liste de plumes dans l'état du jeu. Lorsque nous avons toutes les plumes, nous générons les commandes à partir de cette liste.",
        "projects-encage-seeds": "Nouvelle mécanique: Graines",
        "projects-encage-seeds-content": "Pour la continuation du jeu, nou voulions introduire une nouvelle mécanique dans le jeu pour ajouter un nouveau niveau de complexité dans le jeu. Nous avons décidé d'ajouter une mécanique d'appat sous la forme de graines dans le but d'attirer les oiseaux en un point pour pouvoir ensuite les capturer. Ceci a aussi permis à notre designer de niveaux de placer des oiseaux en hauteur et de les rendre inaccessible aux joueurs à moins d'utiliser notre mécanique d'appats.",
        "projects-encage-seeds-changes": "Changements requis",
        "projects-encage-seeds-changes-content": "Pour le fonctionnement de cette mécanique, nous devions ajouter des fonctionnalités au joueur et aux oiseaux. Premièrement, nous avons ajouter au joueur la fonctionnalité de placer des graines. Ensuite, pour les oiseaux, il a fallu ajouter plus de fonctionnement. Premièrement, il faut que les oiseaux puissent détecter les graines. Cette partie est assez simple puisse que nous pouvons ajouter une requête <i>Environment query system</i> (EQS) pour trouver les appats à l'entour de l'oiseau. Ensuite, après avoir détecté les graines, il faut qu'il se dirige vers sa position. Ceci est aussi assez simple puisque nous avions déjà créé notre mouvement auparavant, donc il fallait seulement préciser une endroit pour qu'il s'y dirige. Pour la dernière partie, nous devions changer la détection pour que les oiseaux soient moins sensibles envers le joueur lorsqu'ils mangent. Nous avons décidé de mettre la détection à 50% lorsqu'ils mangent.",
        /////////////////////////////////////////
        "projects-genetic-warfare-link": "<a href=\"https://davidnina1.itch.io/genetic-warfare\" target=\"_blank\" class=\"card-url\"><div><strong>Essayez le jeu ici!</strong></div></a>",
        "projects-genetic-warfare-intro": "<i>Genetic Warfare</i> est un jeu de combat un contre un local à la manette que j'ai fait en équipe lors de la <i>Wonderjam 2024</i>. Pour cette jam, il y avait le thème commun de la génétique et pour notre équipe, nous devions choisir deux de trois choix, soit <i>versus</i> et <i>Ton allié est aussi ton ennemi</i>.",
        /////////////////////////////////////////
        "projects-hamstorm-camera-management": "Gestion de la caméra",
        "projects-hamstorm-camera-management-content": "La gestion de la caméra est une partie très importante du jeu puisqu'elle permet de mettre en perspective les puzzles du jeu et mieux comprendre comment les parties du puzzle et comment elles interagissent entre elles. Nous avons une caméra en vue isométrique qui peut faire une rotation à coups de 90&deg;, on peut <i>zoomer</i> et <i>dézoomer</i> et nous pouvons aussi déplacer la caméra à l'aide des touches <i>WASD</i>. Toutes ses fonctionnalités permettent au joueur de mieux comprendre le puzzle ou de le voir sous un autre angle qui pourrait les aider à se débloquer.",
        "projects-hamstorm-challenges": "Défis de conception",
        "projects-hamstorm-challenges-content": "Pour les défis de conception, le plus grand problème que nous avons rencontré était la synchronisation des tours et des éléments qui constituent un tour. La plupart du temps que nous avons consacré au projet était de réparer des bugs provenant du comportement de plusieurs composants du jeu et de leur interaction avec notre système de retour en arrière. À regarder notre liste de bugs que nous avons gardé au courant de la session, je dirais que tous les éléments de gameplay ont eu au moins un bug avec le système de retour en arrière. Sinon, un autre grand défi est l'intégration des retours visuels à l'aide de notre artiste technique. Pour que les comportements soient clairs pour le joueur, la plupart des actions que le joueurs faisaient ont un ou plusieurs retours visuels que nous devions lié avec notre artiste technique et ceci a apporté plusieurs problème face à la synchronisation d'action et de fin d'actions. Après beaucoup de temps, nous avons réussi à tout intégrer grâce à notre artiste techniques et les retours visuels fonctionnent à merveille.",
        "projects-hamstorm-description": "Description du jeu",
        "projects-hamstorm-description-content": "Les mines de la ville d'Hamsteria étaient paisibles et prospères, jusqu'au jour où les horribles rats du clan <i>Chedd'Or</i> sont passés à l'attaque! Désormais, le vaillant Hamstörm doit retourner vers la ville pour avertir ses semblables de l'arrivée de ces vilains rongeurs dans leurs tunnels. <br>Parcourez un jeu de puzzle amusant et coloré, dans lequel vous aiderez Hamstörm à se frayer un chemin dans les différentes galeries de la mine, maintenant infestées de terribles rats! Que ce soit en détruisant des cristaux, en brisant le sol sous leurs pieds ou en leur tendant des pièges, tous les moyens sont bons pour arriver à temps à la sortie de la mine!",
        "projects-hamstorm-enemy-behavior": "Comportement des ennemis",
        "projects-hamstorm-enemy-behavior-content": "Le comportement des ennemis est assez simple pour chacun. Premièrement, il y a Soop qui est statique et va attaquer Hamstörm lorsqu'il est sur la case en avant de lui. Gouda va patrouiller son chemin en tout temps et va attaquer Hamstörm lorsqu'il se déplace sur la case où Hamstörm se situe. Finalement, Slinky va bouger seulement si Hamstörm est dans son champ de vision. S'il se rend jusqu'à la fin de sa trajectoire, Slinky va retourner vers sa case initiale et va continuer à chercher pour Hamstörm.",
        "projects-hamstorm-future": "Futur du projet",
        "projects-hamstorm-future-content": "Nous allons présenter notre projet à l'<i><a href=\"https://imaginad.ca/\" target=\"_blank\">ImagiNAD 2024</a></i>, un événement organisé par l'école NAD-UQAC qui présente les projets des finissants de l'école. Cet événement se déroulera le 6 mai 2024 et nous allons présenter notre jeu à des experts de l'industrie et au grand public qui va assister à l'événement. Nous allons aussi publier notre jeu sur <i>Steam</i> à la fin du mois de mai. Nous avons quelques fonctionnalités que nous voulons ajouter avant notre publication Steam, notamment la possibilité de changer le <i>skin</i> de Hamstörm ainsi que fix quelques autres bugs. Le jeu sera disponible <strong>gratuitement</strong> sur Steam avant le début de l'été.",
        "projects-hamstorm-link": "<a href=\"https://store.steampowered.com/app/2944680/Hamstrm/\" target=\"_blank\" class=\"card-url\"><div><strong>Ajoutez Hamstörm à votre wishlist Steam</strong></div></a>",
        "projects-hamstorm-movement": "Mouvement tour par tour du personnage et des ennemis",
        "projects-hamstorm-movement-content": "Pour le mouvement tour par tour, nous devions définir qu'est-ce qu'un tour. Au départ, un tour était défini par le mouvement des personnages, Hamstörm et les rats. Après que le mouvement des rats soit complété, Hamstörm pouvait enfin rebouger. À chaque mouvement, le compteur de tours augmentait, donc chaque mouvement d'une seule case comptait comme un tour. Cependant, pour inciter le joueur à cliquer plus loin, nous avons modifié l'incrémentation du tour seulement si nous arrivons à la case que nous avons cliqué. Avec ce changement, si on décide de cliquer quatre cases plus loin, ce mouvement compte seulement pour un seul tour. Le tout fonctionnait vraiment bien, jusqu'à l'implémentation du retour en arrière.",
        "projects-hamstorm-movement-character": "Mouvement des personnages",
        "projects-hamstorm-movement-character-content": "Le mouvement des personnages inclut Hamstörm et les rats, Gouda et Slinky. Chacun de ses personnages a sa particularité dans le fonctionnement de son mouvement, ce qui fait en sorte que nous devions modifier un peu le fonctionnement pour chacun de ses personnages selon le comportement que nous voulions lui donner.",
        "projects-hamstorm-movement-character-gouda": "Gouda et sa liste de tuiles",
        "projects-hamstorm-movement-character-gouda-content": "Le mouvement de Gouda se fait de tuile en tuile qui sont inscrits dans une liste prédéterminée. La liste est exposée dans l'éditeur Unreal pour que notre designer de jeu et de niveau puisse choisir le chemin qu'il puisse emprunter. S'il oublie de choisir les tuiles du personnage, nous affichons un message à l'écran pour lui indiquer que le personnage n'a pas de chemins à emprunter. Gouda va aussi regarder la prochaine tuile à laquelle il va se diriger et son trajet peut être modifié si on détruit des obstacles dans son chemin.",
        "projects-hamstorm-movement-character-hamstorm": "Hamstörm et sa détection de cases",
        "projects-hamstorm-movement-character-hamstorm-content": "La composante unique du mouvement de Hamstörm est que nous devons détecter où le joueur peut se déplacer selon sa position et selon son environnement. Pour la détection du mouvement de Hamstörm, nous devons analyser ce qu'il y a à l'entour de lui, que ce soient des tuiles, des murs ou de objets destructibles. Chacune de ces composantes rapporte un comportement différent, soit ajouter la tuile à la liste de déplacements possibles, arrêter l'analyse de ce côté ou ajouter l'objet à la liste d'objets destructibles. Un objet destructible peut aussi arrêter l'analyse du côté s'il se trouve trop loin du joueur. Aussi, si le joueur clique à une tuile plus loin que celui à côte du joueur, on fait une analyse pour savoir quelle est la prochaine case à laquelle nous devons nous déplacer et nous ajoutons la case que nous avons cliqué dans une file pour le prochain tour et nous refaisons la même analyse.",
        "projects-hamstorm-movement-character-slinky": "Slinky et son instinct de prédateur",
        "projects-hamstorm-movement-character-slinky-content": "Slinky a la même base de déplacement que Gouda, mais a une particularité qui le rend différent de Gouda. Slinky a une vision apte d'un prédateur et dès que Hamstörm entre dans son champ de vision, il va commencer à le poursuivre rapidement. Slinky va faire le trajet au complet et revenir à sa case de départ et continuer à chercher pour une proie. Slinky bouge de deux cases à la fois, donc il faut vraiment faire attention à nos déplacements lorsque nous devons affronter cet ennemi.",
        "projects-hamstorm-movement-revert": "Modification du tour par tour dû au retour en arrière",
        "projects-hamstorm-movement-revert-content": "Les différentes composantes du jeu ont leur propre comportement et ont tous un impact dans les puzzles de chaque niveau. Que ce soient les ennemis, les murs, les planchers destructibles ou les pièges muraux, notre designer de jeux et de niveaux a placé chaque élément du jeu pour qu'il ait un impact sur la résolution du puzzle. Pour que le tout soit cohérent avec le restant du jeu, nous devons changer les conditions qui déterminent la fin d'un tour, puisqu'il se peut que des actions se terminent après le mouvement de tous les rats du niveau. Nous avons trois nouvelles conditions qui pour finir un tour. La première est qu'il n'y ait pas d'ennemis en train d'attaquer le joueur, la deuxième est qu'il n'y ait pas d'ennemis en train de mourir et la troisième est qu'il n'y ait pas de projectile en mouvement.",
        "projects-hamstorm-myrole": "Mon rôle",
        "projects-hamstorm-myrole-content": "Pour ce projet, j'ai rejoint une équipe d'artiste qui ont fait un prototype du jeu la session précédente. Nous sommes deux programmeurs qui ont rejoint l'équipe pour la session. Pour arriver au produit final, nous avons dû refaire les mécaniques en C++ et implémenter les nouvelles mécaniques. Nous avons implémenté le mouvement tour par tour, incluant le mouvement du personnage principal et des ennemis, la destruction de l'environnement, le comportement des ennemis, la gestion de la caméra et l'option de reculer de tour.",
        "projects-hamstorm-revert": "Reculer de tours",
        "projects-hamstorm-revert-content": "Nous avons commencé à implémenter de retour en arrière vers la mi-session. Cette mécanique ajoute une complexité au niveau du fonctionnement de notre système puisque chaque action utilisateur et chaque action de l'environnement doit être enregistrée et elle doit être enregistrée en ordre d'exécution et dans le bon tour. Initialement, notre définition de tour était assez simple, le tour commence dès que le joueur peut faire des actions et elle se termine lorsque tous les ennemis ont fini de se déplacer. Cependant, ceci a apporté plusieurs bugs dans notre application dû à cette définition.",
        "projects-hamstorm-revert-bugs": "Bugs rencontrés lors de l'implémentation du retour en arrière",
        "projects-hamstorm-revert-bugs-content": "Nous avons rencontré plusieurs bugs lors de l'implémentation du retour en arrière. Un des premiers bugs que nous avons rencontrés est que lorsque nous mourions par Soop dans un niveau où il n'y avait pas de rats qui bougeait, la mort se retrouvait dans le prochain tour au lieu d'être dans le même tour que le mouvement. Pour se faire, nous avons ajouté une condition à la fin de notre tour qui indique qu'aucun rat doit être en train d'attaquer Hamstörm pour compléter le tour. Un autre bug que nous avons rencontré est lié à nos projectiles. Lorsque nous avions un projectile en mouvement, il pouvait tuer un rat après la fin d'un tour et sa mort se faisait le tour suivant. Pour régler ce bug, nous avons ajouté deux conditions à la fin du tour, un projectile ne peut pas être en mouvement et un rat ne peut pas être en train de mourir. Ces bugs sont les bugs principaux que nous avons rencontrés lors du développement de notre jeu.",
        /////////////////////////////////////////
        "projects-home-content": "Je vous invite à voir ma page projets. Cette page contient tous mes projets reliés au développement de jeux vidéos."
    }
}

let lang = "fr"

window.onload = () => {
    if ((urlLang = UrlParamManager.getUrlParam("lang")) != undefined) {
        if (urlLang.toLowerCase() == "fr" || urlLang.toLowerCase() == "en") CookieManager.setCookie("lang", urlLang.toLowerCase())
    }
    if (CookieManager.getCookie("lang") === undefined) {
        CookieManager.setCookie("lang", "fr")
    }
    lang = CookieManager.getCookie("lang")
    updateStrings()

    

    document.querySelectorAll("[project-target]")
        .forEach((elm) => {elm.addEventListener("click", showProjectContent)})
}

function updateStrings() {
    document.querySelectorAll("[data-string]")
        .forEach((elm) => {
            elm.innerHTML = data[lang.toLowerCase()][elm.attributes["data-string"].value]
        })
}

function langSwitch() {
    assignLangCookie(data[lang.toLowerCase()]["lang"].toLowerCase())
    updateStrings()
}

function assignLangCookie(language) {
    CookieManager.setCookie("lang", language.toLowerCase())
    lang = CookieManager.getCookie("lang")
}

function updateContent(selector, dataString) {
    document.querySelector(selector).attributes["data-string"].value = dataString
}

function updateSkillContent(dataStringPrefix) {
    updateContent("#skills-header", `about-me-${dataStringPrefix}-title`)
    updateContent("#skills-content", `about-me-${dataStringPrefix}-content`)
    updateStrings()
    let $skillsHeader = document.querySelector("#skills-header")
    window.scrollTo($skillsHeader.offsetLeft, $skillsHeader.offsetTop)
}

function showProjectContent(evt) {
    let value = document.querySelector(evt.target.attributes["project-target"].value).style.display
    document.querySelector(evt.target.attributes["project-target"].value).style.display = value != "block" ? "block" : "none"
    let body = document.querySelector("body")
    body.style.background = `url('images/${evt.target.attributes["project-background"].value}')`
    body.style.backgroundRepeat = 'no-repeat'
    body.style.backgroundAttachment = 'fixed'
}